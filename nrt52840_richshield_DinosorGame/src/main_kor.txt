#include <zephyr/sys/util.h> // 유틸리티 함수들을 포함하는 헤더 파일
#include <zephyr/drivers/gpio.h> // GPIO 드라이버를 포함하는 헤더 파일
#include <zephyr/drivers/led.h> // LED 드라이버를 포함하는 헤더 파일
#include <zephyr/devicetree.h> // 디바이스 트리 관련 헤더 파일
#include <zephyr/kernel.h> // 커널 관련 헤더 파일
#include <zephyr/logging/log.h> // 로그 기능을 포함하는 헤더 파일

#include <zephyr/device.h> // 디바이스 관련 헤더 파일
#include <zephyr/drivers/sensor.h> // 센서 드라이버를 포함하는 헤더 파일
#include <zephyr/sys/printk.h> // 출력 기능을 포함하는 헤더 파일

// 4x8 LED 매트릭스 숫자 배열 선언
int number_led_matrix_arr_4x8[10][32]= {
    { // 0
        0,1,1,0,
        1,0,0,1,
        1,0,0,1,
        1,0,0,1,
        1,0,0,1,
        1,0,0,1,
        1,0,0,1,
        0,1,1,0
    },
    { // 1
        0,0,1,0,
        0,1,1,0,
        0,0,1,0,
        0,0,1,0,
        0,0,1,0,
        0,0,1,0,
        0,0,1,0,
        0,1,1,1
    },
    { // 2
        0,1,1,0,
        1,0,0,1,
        0,0,0,1,
        0,0,1,0,
        0,1,0,0,
        1,0,0,0,
        1,0,0,0,
        1,1,1,1
    },
    { // 3
        1,1,1,0,
        0,0,0,1,
        0,0,0,1,
        0,1,1,0,
        0,0,0,1,
        0,0,0,1,
        0,0,0,1,
        1,1,1,0
    },
    { // 4
        0,0,1,0,
        0,1,1,0,
        1,0,1,0,
        1,0,1,0,
        1,1,1,1,
        0,0,1,0,
        0,0,1,0,
        0,0,1,0
    },
    { // 5
        1,1,1,1,
        1,0,0,0,
        1,0,0,0,
        1,1,1,0,
        0,0,0,1,
        0,0,0,1,
        0,0,0,1,
        1,1,1,0
    },
    { // 6
        0,1,1,0,
        1,0,0,0,
        1,0,0,0,
        1,1,1,0,
        1,0,0,1,
        1,0,0,1,
        1,0,0,1,
        0,1,1,0
    },
    { // 7
        1,1,1,1,
        0,0,0,1,
        0,0,0,1,
        0,0,1,0,
        0,1,0,0,
        0,1,0,0,
        0,1,0,0,
        0,1,0,0
    },
    { // 8
        0,1,1,0,
        1,0,0,1,
        1,0,0,1,
        0,1,1,0,
        1,0,0,1,
        1,0,0,1,
        1,0,0,1,
        0,1,1,0
    },
    { // 9
        0,1,1,0,
        1,0,0,1,
        1,0,0,1,
        0,1,1,1,
        0,0,0,1,
        0,0,0,1,
        0,0,0,1,
        1,1,1,0
    }
};

// 로그 모듈 등록
LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);

#define LED_NODE DT_COMPAT_GET_ANY_STATUS_OKAY(holtek_ht16k33) // LED 노드 정의

const struct device *led; // 전역 변수 선언

#define GPIO_FAIL -1 // GPIO 실패 코드 정의
#define GPIO_OK 0 // GPIO 성공 코드 정의

static struct gpio_callback button0_cb_data; // 버튼0 콜백 데이터 구조체
static struct gpio_callback button_reset_cb_data; // 리셋 버튼 콜백 데이터 구조체

#define GROUND_START 96 // 땅의 시작 위치
#define GROUND_END 128 // 땅의 끝 위치

#define DINO_LED 84 // 공룡의 LED 위치
#define LIVES 4 // 생명 수
int lives = LIVES; // 현재 생명 수

int score; // 점수

bool is_jumping = false; // 점프 상태
int dino_pos = DINO_LED; // 공룡의 현재 위치
int previous_dino_pos = DINO_LED; // 공룡의 이전 위치 (추가된 변수)
int obstacle_pos = GROUND_END - 1; // 장애물 위치

bool should_turn_off_led = false; // LED를 꺼야 할지 여부 (추가된 변수)
int led_to_turn_off = 0; // 꺼야 할 LED 위치 (추가된 변수)

#define BUTTON_NODE DT_ALIAS(sw0) // 버튼 노드 정의
#define RESET_NODE DT_ALIAS(sw1) // 리셋 노드 정의

static const struct gpio_dt_spec button0 = GPIO_DT_SPEC_GET(BUTTON_NODE, gpios); // 버튼0 GPIO 사양
static const struct gpio_dt_spec button_reset = GPIO_DT_SPEC_GET(RESET_NODE, gpios); // 리셋 버튼 GPIO 사양

// 로터리 엔코더 사용
struct sensor_value val; // 센서 값 구조체
int rc; // 반환 코드
const struct device *const dev = DEVICE_DT_GET(DT_ALIAS(qdec0)); // 장치 포인터

// LED GPIO 사양 배열
static const struct gpio_dt_spec leds[] = {
    GPIO_DT_SPEC_GET(DT_ALIAS(led0), gpios),
    GPIO_DT_SPEC_GET(DT_ALIAS(led1), gpios),
    GPIO_DT_SPEC_GET(DT_ALIAS(led2), gpios),
    GPIO_DT_SPEC_GET(DT_ALIAS(led3), gpios)
};

void game_loop(struct k_work *work); // 게임 루프 함수 선언
K_WORK_DELAYABLE_DEFINE(game_work, game_loop); // 딜레이블 워크 정의

// 버튼0 콜백 함수
void button0_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    if (!is_jumping) { // 점프 중이 아닌 경우
        should_turn_off_led = true; // LED를 꺼야 함을 표시
        led_to_turn_off = dino_pos; // 꺼야 할 LED의 위치 설정
        is_jumping = true; // 점프 상태 설정
        dino_pos -= 16; // 한 줄 위로 점프
        printk("Dino jumps to %d\n", dino_pos); // 공룡의 위치 출력
    }
}

// 리셋 버튼 콜백 함수
void button_reset_callback(const struct device *dev, struct gpio_callback *cb, uint32_t pins)
{
    reset_game(); // 게임 리셋 함수 호출
}

// 게임 리셋 함수
void reset_game()
{
    lives = LIVES; // 생명 수 초기화
    dino_pos = DINO_LED; // 공룡 위치 초기화
    previous_dino_pos = DINO_LED; // 이전 공룡 위치 초기화
    obstacle_pos = GROUND_END - 1; // 장애물 위치 초기화
    is_jumping = false; // 점프 상태 초기화
    should_turn_off_led = false; // LED 꺼짐 상태 초기화
    score = 0; // 점수 초기화

    for (int i = 0; i < LIVES; i++) {
        gpio_pin_set_dt(&leds[i], 1); // 생명 LED 켜기
    }

    printk("Game reset\n"); // 게임 리셋 메시지 출력

    k_work_reschedule(&game_work, K_NO_WAIT); // 게임 루프 다시 예약
}

// GPIO 초기화 함수
int gpio_init(void)
{
    int err = GPIO_FAIL; // 오류 코드 초기화

    // 버튼0 인터럽트 설정
    printk("Setting button0 interrupt\n");

    err = gpio_is_ready_dt(&button0); // 버튼0 GPIO 준비 상태 확인
    if (!err) {
        printk("Error gpio_is_ready_dt button0 pin %d\n", err); // 오류 메시지 출력
        return GPIO_FAIL; // 실패 코드 반환
    }

    err = gpio_pin_configure_dt(&button0, GPIO_INPUT | GPIO_PULL_UP); // 버튼0 핀 구성
    if (err < 0) {
        printk("Error configuring button0 pin %d\n", err); // 오류 메시지 출력
        return GPIO_FAIL; // 실패 코드 반환
    }

    err = gpio_pin_interrupt_configure_dt(&button0, GPIO_INT_EDGE_TO_ACTIVE); // 버튼0 인터럽트 구성
    if (err != 0) {
        printk("Error configuring interrupt on button0 pin %d\n", err); // 오류 메시지 출력
        return GPIO_FAIL; // 실패 코드 반환
    }
    gpio_init_callback(&button0_cb_data, button0_callback, BIT(button0.pin)); // 버튼0 콜백 초기화
    gpio_add_callback(button0.port, &button0_cb_data); // 버튼0 콜백 추가

    // 리셋 버튼 인터럽트 설정
    printk("Setting reset button interrupt\n");

    err = gpio_is_ready_dt(&button_reset); // 리셋 버튼 GPIO 준비 상태 확인
    if (!err) {
        printk("Error gpio_is_ready_dt button_reset pin %d\n", err); // 오류 메시지 출력
        return GPIO_FAIL; // 실패 코드 반환
    }

    err = gpio_pin_configure_dt(&button_reset, GPIO_INPUT | GPIO_PULL_UP); // 리셋 버튼 핀 구성
    if (err < 0) {
        printk("Error configuring button_reset pin %d\n", err); // 오류 메시지 출력
        return GPIO_FAIL; // 실패 코드 반환
    }

    err = gpio_pin_interrupt_configure_dt(&button_reset, GPIO_INT_EDGE_TO_ACTIVE); // 리셋 버튼 인터럽트 구성
    if (err != 0) {
        printk("Error configuring interrupt on button_reset pin %d\n", err); // 오류 메시지 출력
        return GPIO_FAIL; // 실패 코드 반환
    }
    gpio_init_callback(&button_reset_cb_data, button_reset_callback, BIT(button_reset.pin)); // 리셋 버튼 콜백 초기화
    gpio_add_callback(button_reset.port, &button_reset_cb_data); // 리셋 버튼 콜백 추가

    // LED 구성
    for (int i = 0; i < LIVES; i++) {
        if (!device_is_ready(leds[i].port)) {
            printk("Error: LED device %d not ready\n", i); // 오류 메시지 출력
            return GPIO_FAIL; // 실패 코드 반환
        }
        err = gpio_pin_configure_dt(&leds[i], GPIO_OUTPUT_ACTIVE); // LED 핀 구성
        if (err < 0) {
            printk("Error %d: failed to configure LED %d pin\n", err, i); // 오류 메시지 출력
            return GPIO_FAIL; // 실패 코드 반환
        }
    }

    return GPIO_OK; // 성공 코드 반환
}

// 게임 루프 함수
void game_loop(struct k_work *work)
{
    static int jump_counter = 0; // 점프 카운터
    static int game_speed = 121; // 게임 속도 (밀리초)
    static int loop_counter = 0; // 루프 반복 횟수 변수
    const int speed_up_interval = 50; // 속도 증가 간격 (루프 횟수)
    const int min_game_speed = 20; // 최소 게임 속도 (밀리초)
    const int max_game_speed = 500; // 최소 게임 속도 (밀리초)

    // 점프 로직 처리
    if (is_jumping) {
        jump_counter++;
        led_off(led, dino_pos); // 현재 공룡 위치의 LED 끄기
        if (jump_counter >= 5) { // 점프 지속 시간 조정
            dino_pos += 16; // 다시 내려오기
            is_jumping = false; // 점프 상태 해제
            jump_counter = 0; // 점프 카운터 초기화
            printk("Dino falls to %d\n", dino_pos); // 공룡 위치 출력
        }
    }

    // LED 끄기 필요 시
    if (should_turn_off_led) {
        led_off(led, led_to_turn_off); // 지정된 LED 끄기
        should_turn_off_led = false; // 상태 해제
    }

    // 공룡이 내려올 때 이전 위치의 LED 끄기
    if (!is_jumping && previous_dino_pos != dino_pos) {
        led_off(led, previous_dino_pos); // 이전 위치의 LED 끄기
        previous_dino_pos = dino_pos; // 이전 위치 갱신
    }

    // 새로운 공룡 위치 설정
    led_on(led, dino_pos); // 공룡의 새로운 위치 LED 켜기
    
    // 항상 땅 LED 켜기
    for (int i = GROUND_START; i < GROUND_END; i++) {
        led_on(led, i); // 땅 위치의 LED 켜기
    }

    // 장애물 이동
    if (obstacle_pos >= 80) {
        led_off(led, obstacle_pos); // 현재 장애물 위치의 LED 끄기
        obstacle_pos--; // 장애물 위치 이동
        if (obstacle_pos < 80) {
            obstacle_pos = 96 - 1; // 장애물 위치 초기화
        } else {
            led_on(led, obstacle_pos); // 새로운 장애물 위치의 LED 켜기
        }
    }

    // 충돌 검사
    if (dino_pos == obstacle_pos) {
        printk("Collision detected at %d!\n", dino_pos); // 충돌 위치 출력
        lives--; // 생명 수 감소
        for (int i = 0; i < 128; i++) {
            led_on(led, i); // 모든 LED 켜기
            k_sleep(K_MSEC(10)); // 잠시 대기
        }
        for (int i = 128; i >= 0; i--) {
            led_off(led, i); // 모든 LED 끄기
            k_sleep(K_MSEC(10)); // 잠시 대기
        }
        if (lives > 0) {
            gpio_pin_set_dt(&leds[lives], 0); // 남은 생명 LED 끄기
            obstacle_pos = GROUND_END - 1; // 장애물 위치 초기화
        } else {
            // 게임 오버
            for (int i = 0; i < 128; i++) {
                led_on(led, i); // 모든 LED 켜기
            }
            k_sleep(K_MSEC(75)); // 잠시 대기
            for (int i = 128; i >= 0; i--) {
                led_off(led, i); // 모든 LED 끄기
            }
            k_sleep(K_MSEC(75)); // 잠시 대기

            if(score > 9999)
                score = 9999;
            printk("score %d\n",score); // 점수 출력
            int thousands=0, hundreds=0, tens=0, ones=0;

            // 자릿수 추출
            thousands = score / 1000;
            hundreds = (score % 1000) / 100;
            tens = (score % 100) / 10;
            ones = score % 10;

            int num_arr_idx = 0;

            // 천의 자릿수 LED 설정
            for(int i = 0; i < 128; i+=16){
                for(int j = i; j < (i+4); j++){
                    if(number_led_matrix_arr_4x8[thousands][num_arr_idx] == 1){
                        led_on(led, j);
                    } else {
                        led_off(led, j);
                    }

                    num_arr_idx++;
                }
            }

            num_arr_idx = 0;

            // 백의 자릿수 LED 설정
            for(int i = 0; i < 128; i+=16){
                for(int j = (i+4); j < (i+8); j++){
                    if(number_led_matrix_arr_4x8[hundreds][num_arr_idx] == 1){
                        led_on(led, j);
                    } else {
                        led_off(led, j);
                    }
                    num_arr_idx++;
                }
            }

            num_arr_idx = 0;

            // 십의 자릿수 LED 설정
            for(int i = 0; i < 128; i+=16){
                for(int j = (i+8); j < (i+12); j++){
                    if(number_led_matrix_arr_4x8[tens][num_arr_idx] == 1){
                        led_on(led, j);
                    } else {
                        led_off(led, j);
                    }

                    num_arr_idx++;
                }
            }

            num_arr_idx = 0;

            // 일의 자릿수 LED 설정
            for(int i = 0; i < 128; i+=16){
                for(int j = (i+12); j < (i+16); j++){
                    if(number_led_matrix_arr_4x8[ones][num_arr_idx] == 1){
                        led_on(led, j);
                    } else {
                        led_off(led, j);
                    }
                    num_arr_idx++;
                }
            }

            // 생명 LED 끄기
            for (int i = 0; i < LIVES; i++) {
                gpio_pin_set_dt(&leds[i], 0);
            }
            k_sleep(K_MSEC(75)); // 잠시 대기

            return; // 함수 종료
        }
    }

    // 게임 속도 증가 로직
    rc = sensor_sample_fetch(dev); // 센서 샘플 가져오기
    if (rc != 0) {
        printk("Failed to fetch sample (%d)\n", rc); // 오류 메시지 출력
        return; // 함수 종료
    }

    rc = sensor_channel_get(dev, SENSOR_CHAN_ROTATION, &val); // 센서 채널 값 가져오기
    if (rc != 0) {
        printk("Failed to get data (%d)\n", rc); // 오류 메시지 출력
        return; // 함수 종료
    }
    
    loop_counter++;
    if (val.val1 != 0) {
        
        game_speed -= (val.val1 / 18) * 5; // 속도 감소 (게임 속도 증가)
        if(game_speed < min_game_speed){
            game_speed = min_game_speed;
        }
        else if(game_speed > max_game_speed){
            game_speed = max_game_speed;
        }
        printk("encoder_val : %d\n",val.val1); // 엔코더 값 출력
        printk("Increasing game speed: %d ms\n", game_speed); // 게임 속도 출력
    }
    else if (loop_counter % speed_up_interval == 0 && game_speed > min_game_speed) {
        game_speed -= 5; // 속도 감소 (게임 속도 증가)
        printk("Increasing game speed: %d ms\n", game_speed); // 게임 속도 출력
    }

    // 다음 반복 예약
    score++;
    k_work_reschedule(&game_work, K_MSEC(game_speed)); // 게임 루프 다시 예약
}

// 메인 함수
void main(void)
{
    int err;

    err = gpio_init(); // GPIO 초기화
    if (err != GPIO_OK) {
        printk("Error gpio_init %d\n", err); // 오류 메시지 출력
        return; // 함수 종료
    }

    led = DEVICE_DT_GET(LED_NODE); // LED 장치 가져오기
    if (!device_is_ready(led)) {
        LOG_ERR("LED device not ready"); // 오류 메시지 출력
        return; // 함수 종료
    }

    printk("LED device ready\n"); // 장치 준비 완료 메시지 출력

    led_set_brightness(led, 0, 0.1); // LED 밝기 설정

    for (int i = GROUND_START; i < GROUND_END; i++) {
        led_on(led, i); // 땅 LED 켜기
    }

    // 초기 공룡 위치 설정
    led_on(led, dino_pos); // 공룡 LED 켜기

    // 생명 LED 초기화
    for (int i = 0; i < LIVES; i++) {
        gpio_pin_set_dt(&leds[i], 1); // 생명 LED 켜기
    }

    // 로터리 엔코더 확인
    if (!device_is_ready(dev)) {
		printk("Qdec device is not ready\n"); // 오류 메시지 출력
		return; // 함수 종료
	}

    // 게임 루프 시작
    k_work_schedule(&game_work, K_NO_WAIT); // 게임 루프 예약
}
